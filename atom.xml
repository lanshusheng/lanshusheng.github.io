<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>滥书生的码洞</title>
  
  <subtitle>随笔以及一些心得记录</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lanshusheng.github.io/"/>
  <updated>2021-05-10T12:53:05.902Z</updated>
  <id>https://lanshusheng.github.io/</id>
  
  <author>
    <name>lanshusheng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>thread join</title>
    <link href="https://lanshusheng.github.io/2021/05/10/thread-join/"/>
    <id>https://lanshusheng.github.io/2021/05/10/thread-join/</id>
    <published>2021-05-10T12:44:33.000Z</published>
    <updated>2021-05-10T12:53:05.902Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简单解释下，join就是调用wait()使线程进入WAIT状态。使线程完全执行完成。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="thread" scheme="https://lanshusheng.github.io/categories/thread/"/>
    
    
      <category term="— thread" scheme="https://lanshusheng.github.io/tags/%E2%80%94-thread/"/>
    
  </entry>
  
  <entry>
    <title>full gc</title>
    <link href="https://lanshusheng.github.io/2021/05/10/full-gc/"/>
    <id>https://lanshusheng.github.io/2021/05/10/full-gc/</id>
    <published>2021-05-10T12:05:21.000Z</published>
    <updated>2021-05-10T12:05:21.475Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>thread详解</title>
    <link href="https://lanshusheng.github.io/2021/04/28/thread%E8%AF%A6%E8%A7%A3/"/>
    <id>https://lanshusheng.github.io/2021/04/28/thread%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-04-28T11:34:48.000Z</published>
    <updated>2021-04-28T12:03:45.984Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;转载一遍：最适合新人看的。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/H6XSVlaY1gB6Gse3GR8BeA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s/H6XSVlaY1gB6Gse3GR8BeA&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>concurrentHashMap</title>
    <link href="https://lanshusheng.github.io/2021/04/20/concurrentHashMap/"/>
    <id>https://lanshusheng.github.io/2021/04/20/concurrentHashMap/</id>
    <published>2021-04-20T13:03:30.000Z</published>
    <updated>2021-04-25T12:20:52.687Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;一、Hash map 的一些简单介绍&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;真难啊，记录一个这个过程，最难的在于扩容，数据迁移操作不容易看懂。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/04/20/concurrentHashMap/hash.png&quot; alt=&quot;hash&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>AQS</title>
    <link href="https://lanshusheng.github.io/2021/04/01/AQS/"/>
    <id>https://lanshusheng.github.io/2021/04/01/AQS/</id>
    <published>2021-04-01T08:01:20.000Z</published>
    <updated>2021-04-01T13:09:11.958Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;先上一段源码，看了半天讲解，回头发现还是得看源码[cry]。&lt;/p&gt;
    
    </summary>
    
    
      <category term="多线程" scheme="https://lanshusheng.github.io/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="https://lanshusheng.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="AQS" scheme="https://lanshusheng.github.io/tags/AQS/"/>
    
  </entry>
  
  <entry>
    <title>多线程synchronized</title>
    <link href="https://lanshusheng.github.io/2021/03/30/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://lanshusheng.github.io/2021/03/30/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2021-03-30T08:01:20.000Z</published>
    <updated>2021-04-01T12:45:56.331Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;记录一些自己感触！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/03/30/%E5%A4%9A%E7%BA%BF%E7%A8%8B/img/01_02.jpg&quot; alt=&quot;01_02&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="多线程" scheme="https://lanshusheng.github.io/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="synchronized" scheme="https://lanshusheng.github.io/tags/synchronized/"/>
    
      <category term="多线程" scheme="https://lanshusheng.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>基于redis的多维度排序</title>
    <link href="https://lanshusheng.github.io/2020/08/10/%E5%9F%BA%E4%BA%8Eredis%E7%9A%84%E5%A4%9A%E5%9B%A0%E5%AD%90%E6%8E%92%E5%BA%8F/"/>
    <id>https://lanshusheng.github.io/2020/08/10/%E5%9F%BA%E4%BA%8Eredis%E7%9A%84%E5%A4%9A%E5%9B%A0%E5%AD%90%E6%8E%92%E5%BA%8F/</id>
    <published>2020-08-10T09:05:16.000Z</published>
    <updated>2020-08-10T10:20:37.857Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概览&quot;&gt;&lt;a href=&quot;#概览&quot; class=&quot;headerlink&quot; title=&quot;概览&quot;&gt;&lt;/a&gt;概览&lt;/h1&gt;&lt;h3 id=&quot;为什么需要多维度排序&quot;&gt;&lt;a href=&quot;#为什么需要多维度排序&quot; class=&quot;headerlink&quot; title=&quot;为什么需要多维度排序&quot;&gt;&lt;/a&gt;为什么需要多维度排序&lt;/h3&gt;&lt;p&gt;   常见的feed流架构下，我们需要很多的排序流，比如 雪球的评论流，需要按赞和时间进行排序（有赞的评论，先按赞排序。没有赞的评论按时间倒排）。&lt;/p&gt;
&lt;p&gt;  需求：按赞和评论排序。QPS &amp;gt; 5000，需要缓存。&lt;/p&gt;
&lt;p&gt;常见设计方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;feed流里面存储按时间排序feed流。定时或者异步计算时间因子。但是这个时候会面临一个问题，你的feed流永远计算不是实时的。你的热贴流永远计算不及时。所以方案一不可取。&lt;/li&gt;
&lt;li&gt;采用bit方式, 统一或若干小domain(比如点赞数), 再在排序后面接bit控制。核心在于如何计算score。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="redis使用" scheme="https://lanshusheng.github.io/categories/redis%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="feed流" scheme="https://lanshusheng.github.io/tags/feed%E6%B5%81/"/>
    
      <category term="redis" scheme="https://lanshusheng.github.io/tags/redis/"/>
    
      <category term="sorted-set" scheme="https://lanshusheng.github.io/tags/sorted-set/"/>
    
      <category term="多因子排序" scheme="https://lanshusheng.github.io/tags/%E5%A4%9A%E5%9B%A0%E5%AD%90%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>stream 常见函数的一些梳理</title>
    <link href="https://lanshusheng.github.io/2020/08/10/stream/"/>
    <id>https://lanshusheng.github.io/2020/08/10/stream/</id>
    <published>2020-08-10T08:15:00.000Z</published>
    <updated>2020-08-10T09:53:38.765Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="lambda函数" scheme="https://lanshusheng.github.io/categories/lambda%E5%87%BD%E6%95%B0/"/>
    
    
      <category term="stream" scheme="https://lanshusheng.github.io/tags/stream/"/>
    
      <category term="Lambda" scheme="https://lanshusheng.github.io/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>关于强弱软虚引用</title>
    <link href="https://lanshusheng.github.io/2020/08/04/%E5%85%B3%E4%BA%8E%E5%BC%BA%E5%BC%B1%E8%99%9A%E5%BC%95%E7%94%A8/"/>
    <id>https://lanshusheng.github.io/2020/08/04/%E5%85%B3%E4%BA%8E%E5%BC%BA%E5%BC%B1%E8%99%9A%E5%BC%95%E7%94%A8/</id>
    <published>2020-08-04T11:23:34.000Z</published>
    <updated>2020-08-04T12:52:39.825Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;#【转】Java的引用核心&lt;/p&gt;
&lt;p&gt;引用：&lt;a href=&quot;https://mp.weixin.qq.com/s/iw6Vgm9odYSaeKTiofTVnw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s/iw6Vgm9odYSaeKTiofTVnw&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;  java存在四种引用：强引用、软引用、弱引用、虚引用。&lt;/p&gt;
&lt;h2 id=&quot;概览&quot;&gt;&lt;a href=&quot;#概览&quot; class=&quot;headerlink&quot; title=&quot;概览&quot;&gt;&lt;/a&gt;概览&lt;/h2&gt;&lt;p&gt;Java的内存分配和内存回收，都是由jvm去处理，一个对象是否可以被回收，主要看是否有引用指向此对象，说的专业点，叫可达性分析。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Java设计这四种引用的主要目的有两个：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以让程序员通过代码的方式来决定某个对象的生命周期；&lt;/li&gt;
&lt;li&gt;主动利用垃圾回收。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="gc" scheme="https://lanshusheng.github.io/categories/gc/"/>
    
    
      <category term="垃圾回收" scheme="https://lanshusheng.github.io/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    
      <category term="引用" scheme="https://lanshusheng.github.io/tags/%E5%BC%95%E7%94%A8/"/>
    
      <category term="内存分配" scheme="https://lanshusheng.github.io/tags/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>计数器</title>
    <link href="https://lanshusheng.github.io/2020/07/31/%E8%AE%A1%E6%95%B0%E5%99%A8/"/>
    <id>https://lanshusheng.github.io/2020/07/31/%E8%AE%A1%E6%95%B0%E5%99%A8/</id>
    <published>2020-07-31T05:47:31.000Z</published>
    <updated>2020-08-10T09:07:46.458Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概览&quot;&gt;&lt;a href=&quot;#概览&quot; class=&quot;headerlink&quot; title=&quot;概览&quot;&gt;&lt;/a&gt;概览&lt;/h1&gt;&lt;h3 id=&quot;为什么要引入计数器&quot;&gt;&lt;a href=&quot;#为什么要引入计数器&quot; class=&quot;headerlink&quot; title=&quot;为什么要引入计数器&quot;&gt;&lt;/a&gt;为什么要引入计数器&lt;/h3&gt;&lt;p&gt;计数器的作用如下：&lt;/p&gt;
&lt;p&gt;   1、简单的好处是：可以加速读取的时间。&lt;/p&gt;
&lt;p&gt;   2、对于大量（80%）帖子，其实都没有任何数（评论，点赞）。对于计数器，内部为0的数据，可以减少很多timeline的读取操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计数器" scheme="https://lanshusheng.github.io/categories/%E8%AE%A1%E6%95%B0%E5%99%A8/"/>
    
    
      <category term="计数器" scheme="https://lanshusheng.github.io/tags/%E8%AE%A1%E6%95%B0%E5%99%A8/"/>
    
      <category term="feed流" scheme="https://lanshusheng.github.io/tags/feed%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>关于计数器的一些思考</title>
    <link href="https://lanshusheng.github.io/2020/07/30/%E5%85%B3%E4%BA%8E%E8%AE%A1%E6%95%B0%E5%99%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    <id>https://lanshusheng.github.io/2020/07/30/%E5%85%B3%E4%BA%8E%E8%AE%A1%E6%95%B0%E5%99%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</id>
    <published>2020-07-30T08:01:20.000Z</published>
    <updated>2020-07-31T06:06:10.710Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;#概览&lt;/p&gt;
    
    </summary>
    
    
      <category term="计数器" scheme="https://lanshusheng.github.io/categories/%E8%AE%A1%E6%95%B0%E5%99%A8/"/>
    
    
      <category term="计数器" scheme="https://lanshusheng.github.io/tags/%E8%AE%A1%E6%95%B0%E5%99%A8/"/>
    
      <category term="feed流" scheme="https://lanshusheng.github.io/tags/feed%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>Young gc 频繁的解决方案</title>
    <link href="https://lanshusheng.github.io/2020/07/28/gc/"/>
    <id>https://lanshusheng.github.io/2020/07/28/gc/</id>
    <published>2020-07-28T11:24:25.000Z</published>
    <updated>2020-07-31T06:14:48.182Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;gc效果优化如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/07/28/gc/94CBD6BE-9426-4287-A38F-024F68D6DD6D.png&quot; alt=&quot;94CBD6BE-9426-4287-A38F-024F68D6DD6D&quot;&gt;&lt;/p&gt;
&lt;p&gt;原理以及调优过程：&lt;/p&gt;
    
    </summary>
    
    
      <category term="jvm" scheme="https://lanshusheng.github.io/categories/jvm/"/>
    
    
      <category term="gc" scheme="https://lanshusheng.github.io/tags/gc/"/>
    
      <category term="jvm 调优" scheme="https://lanshusheng.github.io/tags/jvm-%E8%B0%83%E4%BC%98/"/>
    
  </entry>
  
  <entry>
    <title>为什么会写博客</title>
    <link href="https://lanshusheng.github.io/2020/07/28/remind/"/>
    <id>https://lanshusheng.github.io/2020/07/28/remind/</id>
    <published>2020-07-28T03:20:10.000Z</published>
    <updated>2020-07-28T07:45:40.455Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h4 id=&quot;不忘初心？&quot;&gt;&lt;a href=&quot;#不忘初心？&quot; class=&quot;headerlink&quot; title=&quot;不忘初心？&quot;&gt;&lt;/a&gt;不忘初心？&lt;/h4&gt;&lt;h3 id=&quot;价值？&quot;&gt;&lt;a href=&quot;#价值？&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://lanshusheng.github.io/2020/07/28/hello-world/"/>
    <id>https://lanshusheng.github.io/2020/07/28/hello-world/</id>
    <published>2020-07-28T03:05:09.310Z</published>
    <updated>2020-07-31T05:40:09.074Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;hello-world&quot;&gt;&lt;a href=&quot;#hello-world&quot; class=&quot;headerlink&quot; title=&quot;hello world&quot;&gt;&lt;/a&gt;hello world&lt;/h3&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
